/*
 * main.c
 *
 *  Created on: 2024年10月30日
 *      Author: 呜啦啦
 */

#include <stdio.h>
#include "sleep.h"
#include "xil_printf.h"
#include "xparameters.h"//包含器件参数信息
#include "xgpiops.h"//包含有关GPIO操作函数
#include "xscugic.h"//包含中断响应函数
#include "xil_exception.h"
#include "xplatform_info.h"

//设备实例化
XGpioPs GPIO; 					//GPIO实例   XGpioPs结构体，里面有各种配置参数，其包括XGpioPs_Config
XGpioPs_Config *ConfigPtr;		//GPIO器件配置信息  是一个结构体指针，用于配置GPIO基本信息

XScuGic Intc;					//中断实例
XScuGic_Config *IntcConfig; 	//中断控制器配置信息


//定义ID
#define GPIO_ID        XPAR_XGPIOPS_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID

//定义LED与Key
#define PS_LED1 0
#define PS_KEY1 9

//控制LED的状态
int flag = 0;

/******************************************************************************************
 * GPIO初始化函数
 * 功能：初始化GPIO，配置对应GPIO的输入输出
 * 参数1：XGpioPs的地址
 * 参数2：设备ID
 * ***************************************************************************************/
void Gpio_Config(XGpioPs *Gpio_ps, u16 DeviceId)
{
	//第一步，初始化GPIO的驱动
	//查找器件的配置信息，返回器件ID和寄存器地址给XGpioPs_Config这个结构体
	ConfigPtr = XGpioPs_LookupConfig(DeviceId);

	//初始化GPIO的配置，设置一些默认值 比如最大BANK 最大引脚，器件ID等，关闭了GPIO的中断
	//参数1：设备指针（XGpioPs结构体地址）   参数2：器件配置信息（XGpioPs_Config结构体地址）
	XGpioPs_CfgInitialize(Gpio_ps, ConfigPtr, Psgpio_ptr->BaseAddr);

	//第二步：设置GPIO的方向，1为输出，0为输入
	XGpioPs_SetDirectionPin(Gpio_ps, PS_LED1, 1);
	XGpioPs_SetDirectionPin(Gpio_ps, PS_KEY1, 0);

	//输出使能 	1为使能 	0为不使能
	XGpioPs_SetOutputEnablePin(Gpio_ps, PS_LED1, 1);
}

/******************************************************************************************
 * 设置中断系统
 * 功能：初始化GPIO，配置对应GPIO的输入输出
 * 参数1：XGpioPs的地址
 * 参数2：设备ID
 * ***************************************************************************************/
void SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio,u16 GpioIntrId)
{
		//初始化异常（中断请求也是异常的一种）
		Xil_ExceptionInit();

		//查找中断配置信息，返回配置参数，初始化中断控制器
		IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
		if (NULL == IntcConfig) {
			return XST_FAILURE;
		}

		/*
		 * Connect the interrupt controller interrupt handler to the hardware
		 * interrupt handling logic in the processor.
		 */
		Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
					(Xil_ExceptionHandler)XScuGic_InterruptHandler,
					GicInstancePtr);

		/*
		 * Connect the device driver handler that will be called when an
		 * interrupt for the device occurs, the handler defined above performs
		 * the specific interrupt processing for the device.
		 */
		Status = XScuGic_Connect(GicInstancePtr, GpioIntrId,
					(Xil_ExceptionHandler)XGpioPs_IntrHandler,
					(void *)Gpio);
		if (Status != XST_SUCCESS) {
			return Status;
		}

		/* Enable falling edge interrupts for all the pins in bank 0. */
		XGpioPs_SetIntrType(Gpio, GPIO_BANK, 0x00, 0xFFFFFFFF, 0x00);

		/* Set the handler for gpio interrupts. */
		XGpioPs_SetCallbackHandler(Gpio, (void *)Gpio, IntrHandler);


		/* Enable the GPIO interrupts of Bank 0. */
		XGpioPs_IntrEnable(Gpio, GPIO_BANK, (1 << Input_Pin));


		/* Enable the interrupt for the GPIO device. */
		XScuGic_Enable(GicInstancePtr, GpioIntrId);


		/* Enable interrupts in the Processor. */
		Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);
}


SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio,
				u16 GpioIntrId)


int main()
{
	printf("MIO TEST");
	Gpio_Config(&GPIO,GPIO_ID);//注：传入的第一个参数是地址
	SetupInterruptSystem(Intc, Gpio, GPIO_INTERRUPT_ID);




}
